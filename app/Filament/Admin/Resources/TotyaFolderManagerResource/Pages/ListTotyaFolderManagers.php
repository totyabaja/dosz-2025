<?php

namespace App\Filament\Admin\Resources\TotyaFolderManagerResource\Pages;

use App\Filament\Admin\Resources\TotyaFolderManagerResource;
use App\Filament\Admin\Resources\TotyaFolderManagerResource\Actions\{CreateSubFolderAction, GoToParentFolderAction, LinkCollectionFolderAction, UploadFileToFolderAction};
use App\Filament\Widgets\FolderTreeWidget;
use Filament\Actions;
use Filament\Forms;
use Filament\Forms\Components\TextInput;
use Filament\Notifications\Notification;
use Filament\Resources\Pages\ListRecords;
use Filament\Tables\Columns\Layout\View;
use TotyaDev\TotyaDevMediaManager\Models\Folder;
use Filament\Resources\Pages\Concerns\InteractsWithRecord;
use Filament\Resources\Pages\ManageRecords;
use Filament\Tables\Actions\BulkActionGroup;
use Filament\Tables\Actions\DeleteAction;
use Filament\Tables\Actions\DeleteBulkAction;
use Illuminate\Database\Eloquent\Builder;
use TotyaDev\TotyaDevMediaManager\Models\Media;

class ListTotyaFolderManagers extends ListRecords
{
    protected static string $resource = TotyaFolderManagerResource::class;

    public ?string $folder_id = null;
    public ?Folder $folder = null;

    public function getTitle(): string
    {
        return $this->folder->name; // TODO: Change the autogenerated stub
    }

    public function getBreadcrumbs(): array
    {
        $breadcrumbs = [
            TotyaFoldermanagerResource::getUrl('index') => mb_ucfirst(TotyaFolderManagerResource::getPluralModelLabel()),
        ];

        $folder = $this->folder; // Az aktuális mappa
        $rootFolder = Folder::firstWhere('collection', 'publikus-allomanyok');

        // Rekurzívan összegyűjtjük az összes szülőt
        $hierarchy = [];
        while ($folder && $folder->id !== $rootFolder?->id) {
            $hierarchy[TotyaFolderManagerResource::getUrl('index', ['folder_id' => $folder->id])] = $folder->name;
            $folder = $folder->parent; // A következő szülő beállítása
        }

        // Az összegyűjtött szülők fordított sorrendben kerüljenek be
        $breadcrumbs = array_merge($breadcrumbs, array_reverse($hierarchy));

        // Utolsó elemként az aktuális mappa
        $breadcrumbs[TotyaFolderManagerResource::getUrl('index', ['folder_id' => $this->folder_id])] = $this->getTitle();

        return $breadcrumbs;
    }

    public function mount(): void
    {
        parent::mount();

        session()->forget('folder_id');

        if (!request()->has('folder_id')) {
            $folder = Folder::firstWhere('collection', 'publikus-allomanyok');
        } else {
            $folder = Folder::firstWhere('id', request()->get('folder_id'));
        }

        $this->folder = $folder;
        $this->folder_id = $folder->id;
        session(['folder_id', $folder->id]);
    }


    protected function getHeaderActions(): array
    {
        $folder_id = $this->folder_id;

        return [
            GoToParentFolderAction::make($folder_id),
            CreateSubFolderAction::make($folder_id),
            UploadFileToFolderAction::make($folder_id),
            LinkCollectionFolderAction::make($folder_id),
        ];
    }

    protected function getBulkActions(): array
    {
        return [
            BulkActionGroup::make([
                DeleteBulkAction::make(),
            ]),
        ];
    }


    public function folderAction(?Folder $item = null)
    {
        return Actions\Action::make('folderAction')
            ->action(function (array $arguments, array $data) {
                return redirect()->to(TotyaFolderManagerResource::getUrl('index', ['folder_id' => $arguments['folder_id']['id']]));
            })
            ->view('totyadev-media-manager::pages.folder-action', ['item' => $item]);
    }

    public function deleteMedia()
    {
        return Actions\Action::make('deleteMedia')
            ->label(trans('totyadev-media-manager::messages.media.meta.delete-media'))
            ->icon('heroicon-s-trash')
            ->color('danger')
            ->requiresConfirmation()
            ->action(function (array $arguments) {
                $media = Media::find($arguments['record']['id']);
                $media->delete();

                Notification::make()
                    ->title(trans('totyadev-media-manager::messages.media.notifications.delete-folder'))
                    ->success()
                    ->send();
            });
    }
}
